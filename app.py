import os
import threading
import time
from datetime import datetime, timedelta
import requests
from flask import Flask, request, jsonify
import google.generativeai as genai

app = Flask(__name__)

# ‡¶®‡¶§‡ßÅ‡¶® API Key ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
API_KEY = "AIzaSyDTovjgpg8zjzRFoCufjeYvRidcXSIInvQ"
genai.configure(api_key=API_KEY)

# /td ‡¶è‡¶®‡ßç‡¶°‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
generation_config_td = {
    "temperature": 0.2,
    "top_p": 0.85,
    "top_k": 30,
    "max_output_tokens": 100,
    "response_mime_type": "text/plain",
}

# ‡¶Æ‡¶°‡ßá‡¶≤ ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ
model_td = genai.GenerativeModel(
    model_name="gemini-2.0-flash", generation_config=generation_config_td,
)

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡ßá‡¶∂‡¶® ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶°‡¶ø‡¶ï‡¶∂‡¶®‡¶æ‡¶∞‡¶ø
user_sessions = {}
SESSION_TIMEOUT = timedelta(hours=6)

# ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø (‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶è‡¶Æ‡¶®‡¶≠‡¶æ‡¶¨‡ßá)
initial_history = [
    {"role": "user", "parts": ["Give me the title and episode 1 of Naruto Season 1.\n\nOf course, just remember that you can't add anything extra.\n"]},
    {"role": "model", "parts": ["Enter: Naruto Uzumaki!\n"]},
    {"role": "user", "parts": ["Give me the title and episode 1\n2 of Naruto Season 1.\n\nOf course, just remember that you can't add anything extra."]},
    {"role": "model", "parts": ["My Name Is Konohamaru!\n"]},
    {"role": "user", "parts": ["Give me the title and episode 1 of one piece Season 1.\n\nOf course, just remember that you can't add anything extra."]},
    {"role": "model", "parts": ["Romance Dawn - The Adventure of Luffy!\n"]},
]

@app.route("/td", methods=["GET"])
def ai_response():
    """‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü‡ßá‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶§‡ßá ‡¶è‡¶Ü‡¶á ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßá‡•§"""
    question = request.args.get("q")
    user_id = request.args.get("id")

    if not question:
        return jsonify({"error": "Missing 'q' parameter"}), 400
    if not user_id:
        return jsonify({"error": "Missing 'id' parameter"}), 400

    # ‡¶®‡¶§‡ßÅ‡¶® ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡ßá‡¶∂‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
    if user_id not in user_sessions:
        user_sessions[user_id] = {
            "history": initial_history.copy(),  # ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßá ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
            "last_active": datetime.now()
        }

    # ‡¶∏‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑ ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
    user_sessions[user_id]["last_active"] = datetime.now()

    try:
        # ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶∏‡ßá‡¶∂‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶∏‡¶π
        chat_session = model_td.start_chat(history=user_sessions[user_id]["history"])
        
        # ‡¶è‡¶Ü‡¶á-‡¶è‡¶∞ ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ
        response = chat_session.send_message(question)

        if response.text:
            # ‡¶®‡¶§‡ßÅ‡¶® ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡¶∞‡¶ø ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
            user_sessions[user_id]["history"] = chat_session.history
            return jsonify({"response": response.text})
        else:
            return jsonify({"error": "AI did not return any response"}), 500

    except Exception as e:
        return jsonify({"error": f"Internal Server Error: {str(e)}"}), 500

@app.route('/ping', methods=['GET'])
def ping():
    """‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡¶ø‡¶Ç ‡¶è‡¶®‡ßç‡¶°‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡•§"""
    return jsonify({"status": "alive"})

def clean_inactive_sessions():
    """‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶ü‡¶ø‡¶≠ ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶æ ‡¶∏‡ßá‡¶∂‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡•§"""
    while True:
        current_time = datetime.now()
        for user_id, session_data in list(user_sessions.items()):
            if current_time - session_data["last_active"] > SESSION_TIMEOUT:
                print(f"üßπ Removing inactive session for user {user_id}")
                del user_sessions[user_id]
        time.sleep(300)

def keep_alive():
    url = "https://app-ly.onrender.com/ping"
    while True:
        time.sleep(300)
        try:
            response = requests.get(url)
            print("‚úÖ Ping successful" if response.status_code == 200 else f"‚ö†Ô∏è Ping failed: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Error: {e}")

if __name__ == '__main__':
    Thread(target=keep_alive, daemon=True).start()
    app.run(debug=True, host='0.0.0.0', port=3000)
