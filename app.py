import os
import threading
import time
from datetime import datetime, timedelta
import requests
from flask import Flask, request, jsonify
import google.generativeai as genai

app = Flask(__name__)

# ржирждрзБржи API Key ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рж▓рзЛ
API_KEY = "AIzaSyDTovjgpg8zjzRFoCufjeYvRidcXSIInvQ"
genai.configure(api_key=API_KEY)

# /td ржПржирзНржбржкржпрж╝рзЗржирзНржЯрзЗрж░ ржЬржирзНржп ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи
generation_config_td = {
    "temperature": 0.2,
    "top_p": 0.85,
    "top_k": 30,
    "max_output_tokens": 50,  # ржЖржирзБржорж╛ржирж┐ржХ рзирзж рж╢ржмрзНржжрзЗрж░ ржоржзрзНржпрзЗ рж╕рзАржорж┐ржд
    "response_mime_type": "text/plain",
}

# ржоржбрзЗрж▓ ржХржиржлрж┐ржЧрж╛рж░ ржХрж░рж╛
model_td = genai.GenerativeModel(
    model_name="gemini-2.0-flash",
    generation_config=generation_config_td,
)

# ржЗржЙржЬрж╛рж░ рж╕рзЗрж╢ржи рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛рж░ ржЬржирзНржп ржбрж┐ржХрж╢ржирж╛рж░рж┐
user_sessions = {}
SESSION_TIMEOUT = timedelta(hours=6)  # 6 ржШржгрзНржЯрж╛ ржкрж░ рж╕рзЗрж╢ржи ржЯрж╛ржЗржоржЖржЙржЯ рж╣ржмрзЗ

@app.route("/td", methods=["GET"])
def ai_response():
    """ ржЗржЙржЬрж╛рж░ ржЗржиржкрзБржЯрзЗрж░ ржнрж┐рждрзНрждрж┐рждрзЗ ржПржЖржЗ рж░рзЗрж╕ржкржирзНрж╕ ржкрзНрж░ржжрж╛ржи ржХрж░рзЗред """
    question = request.args.get("q")
    user_id = request.args.get("id")

    if not question:
        return jsonify({"error": "Missing 'q' parameter"}), 400
    if not user_id:
        return jsonify({"error": "Missing 'id' parameter"}), 400

    # ржирждрзБржи ржЗржЙржЬрж╛рж░рзЗрж░ ржЬржирзНржп рж╕рзЗрж╢ржи рждрзИрж░рж┐ ржХрж░рж╛
    if user_id not in user_sessions:
        user_sessions[user_id] = {
            "history": [],
            "last_active": datetime.now()
        }

    # рж╕рзЗрж╢ржирзЗрж░ рж╕рж░рзНржмрж╢рзЗрж╖ рж╕ржХрзНрж░рж┐ржпрж╝ рж╕ржоржпрж╝ ржЖржкржбрзЗржЯ ржХрж░рж╛
    user_sessions[user_id]["last_active"] = datetime.now()

    # ржЗржЙржЬрж╛рж░рзЗрж░ ржкрзНрж░рж╢рзНржи ржЗрждрж┐рж╣рж╛рж╕рзЗ рж╕ржВржпрзЛржЬржи ржХрж░рж╛
    user_sessions[user_id]["history"].append({"role": "user", "parts": [question]})

    try:
        # ржкрзВрж░рзНржмржмрж░рзНрждрзА ржЗрждрж┐рж╣рж╛рж╕ рж╕рж╣ ржЪрзНржпрж╛ржЯ рж╕рзЗрж╢ржи рждрзИрж░рж┐ ржХрж░рж╛
        chat_session = model_td.start_chat(history=user_sessions[user_id]["history"])

        # ржПржЖржЗ-ржПрж░ рж░рзЗрж╕ржкржирзНрж╕ ржирзЗржУржпрж╝рж╛
        response = chat_session.send_message(question)

        if response.text:
            # рж░рзЗрж╕ржкржирзНрж╕ ржЗрждрж┐рж╣рж╛рж╕рзЗ рж╕ржВржпрзЛржЬржи ржХрж░рж╛
            user_sessions[user_id]["history"].append({"role": "model", "parts": [response.text]})
            return jsonify({"response": response.text})
        else:
            return jsonify({"error": "AI did not return any response"}), 500

    except Exception as e:
        return jsonify({"error": f"Internal Server Error: {str(e)}"}), 500

@app.route('/ping', methods=['GET'])
def ping():
    """ рж╕рж╛рж░рзНржнрж╛рж░рзЗрж░ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржЪрзЗржХ ржХрж░рж╛рж░ ржЬржирзНржп ржПржХржЯрж┐ ржкрж┐ржВ ржПржирзНржбржкржпрж╝рзЗржирзНржЯред """
    return jsonify({"status": "alive"})

def clean_inactive_sessions():
    """ржЕрзНржпрж╛ржХржЯрж┐ржн ржирж╛ ржерж╛ржХрж╛ рж╕рзЗрж╢ржиржЧрзБрж▓рзЛ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рзЗред"""
    while True:
        current_time = datetime.now()
        for user_id, session_data in list(user_sessions.items()):
            if current_time - session_data["last_active"] > SESSION_TIMEOUT:
                print(f"ЁЯз╣ Removing inactive session for user {user_id}")
                del user_sessions[user_id]
        time.sleep(300)  # ржкрзНрж░рждрж┐ рзл ржорж┐ржирж┐ржЯ ржкрж░ ржЪрзЗржХ ржХрж░ржмрзЗ

def keep_alive():
    """ рж╕рж╛рж░рзНржнрж╛рж░ рж╕ржХрзНрж░рж┐ржпрж╝ рж░рж╛ржЦрждрзЗ ржкрзНрж░рждрж┐ рзл ржорж┐ржирж┐ржЯ ржкрж░ ржкрж┐ржВ ржкрж╛ржарж╛ржпрж╝ред """
    url = "https://new-ai-buxr.onrender.com/ping"
    while True:
        time.sleep(300)
        try:
            response = requests.get(url)
            if response.status_code == 200:
                print("тЬЕ Keep-Alive Ping Successful")
            else:
                print(f"тЪая╕П Keep-Alive Ping Failed: Status Code {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"тЭМ Keep-Alive Error: {e}")

# ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб ржерзНрж░рзЗржб ржЪрж╛рж▓рзБ ржХрж░рж╛
clean_up_thread = threading.Thread(target=clean_inactive_sessions, daemon=True)
clean_up_thread.start()

keep_alive_thread = threading.Thread(target=keep_alive, daemon=True)
keep_alive_thread.start()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
